<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- 整合redis 构造注入 Jedis jedis=new Jedis("192.168.85.133",6379); 关于构造注入的注意实现： 
		1.name属性；代表构造方法中的参数名称 注意事项：在使用构造注入时，程序打包部署时最好添加源码。 如果没有导入源码，那么程序不会维护形参 则名称arg0 
		arg1 arg2 2.index属性 表示下标 ，从0开始。根据参数位置匹配构造方法， 假如构造方法重载了 User(String a,Sting 
		b) User(int a,String b) User(Dog dog,String b) 用下标插入就会导致不知道使用哪个构造方法进行值的注入 
		e.g <bean id="jedis" class="redis.clients.jedis.Jedis"> <constructor-arg 
		index="0" value=${redis.host} type="Dog"></constructor-arg> <constructor-arg 
		index="1" value=${redis.port} type="java.lang.String"></constructor-arg> 
		<constructor-arg ></constructor-arg> </bean> 3.type属性 type="" 表示参数类型，一般默认不写，由Spring框架内部自动进行强转 
		所以在为参数赋值时，必须严格的规范构造方法，否则注入会有问题 type中基本类型可以直接写int等，不过对象就要引用， 例如 type="java.lang.String" 
		type="int" <bean id="jedis" class="redis.clients.jedis.Jedis"> <constructor-arg 
		name="host" value="${redis.host}"></constructor-arg> <constructor-arg name="port" 
		value="${redis.port}"></constructor-arg> </bean> -->

	<!-- 实现Spring整合分片 -->

	<!-- <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxTotal" value="${redis.maxTotal}"></property> </bean> -->

	<!-- 定义三个redis节点 -->
	<!-- <bean id="shardInfoA" class="redis.clients.jedis.JedisShardInfo"> <constructor-arg 
		name="host" value="${redis.host}"></constructor-arg> <constructor-arg name="port" 
		value="${redis.port.a}"></constructor-arg> </bean> <bean id="shardInfoB" 
		class="redis.clients.jedis.JedisShardInfo"> <constructor-arg name="host" 
		value="${redis.host}"></constructor-arg> <constructor-arg name="port" value="${redis.port.b}"></constructor-arg> 
		</bean> <bean id="shardInfoC" class="redis.clients.jedis.JedisShardInfo"> 
		<constructor-arg name="host" value="${redis.host}"></constructor-arg> <constructor-arg 
		name="port" value="${redis.port.c}"></constructor-arg> </bean> -->

	<!-- 定义连接池 -->
	<!-- <bean id="pool" class="redis.clients.jedis.ShardedJedisPool"> <constructor-arg 
		name="poolConfig" ref="poolConfig"></constructor-arg> <constructor-arg name="shards"> 
		<list> <ref bean="shardInfoA"/> <ref bean="shardInfoB"/> <ref bean="shardInfoC"/> 
		</list> </constructor-arg> </bean> -->

	<!-- 配置redis -->
	<!-- <bean id="sentinelPool" class="redis.clients.jedis.JedisSentinelPool"> 
		<constructor-arg name="masterName" value="${redis.mastername}"></constructor-arg> 
		<constructor-arg name="sentinels"> <set> <value>${redis.sentinel}</value> 
		</set> </constructor-arg> <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg> 
		</bean> -->

	<!-- 定义连接池对象 -->
	<!-- <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxTotal" value="${redis.maxTotal}"></property> </bean> -->


	<!-- Jedis配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<!--最大建立连接等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="minIdle" value="${redis.minIdle}" />
	</bean>

	<!--通过工厂模式获取数据 -->
	<bean id="jedisCluster"
		class="com.jt.common.factory.JedisClusterFactory">
		<!--引入配置文件源文件 -->
		<property name="propertySource">
			<value>classpath:/property/redis.properties</value>
		</property>
		<!--引入池配置文件 -->
		<property name="poolConfig" ref="poolConfig" />
		<!--添加配置前缀 -->
		<property name="redisNodePrefix" value="redis.cluster" />
	</bean>





</beans>